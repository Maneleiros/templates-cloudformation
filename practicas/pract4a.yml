AWSTemplateFormatVersion: 2010-09-09
Description: Part 1 - Build a webapp stack with CloudFormation

Parameters:
    CreateInstance:
      Description: "Se creara instancia"
      Type: String
      Default: true
      AllowedValues:
      - true
      - false
    Environment:
      Description: "Entornos"
      Type: String
      Default: dev
      AllowedValues:
      - dev
      - prod
      - test
    InstanceType:
      Description: "Tipo de instancia"
      Type: String
      Default: t2.nano
      AllowedValues:
        - t2.nano
        - t2.micro
        - t2.small

Conditions:
  WithEC2:
    Fn::Equals:
      - !Ref CreateInstance
      - "true"

Rules:
  DevEnvironmentRule:
    Assertions:
      - Assert: !Equals [ !Ref InstanceType,  "t2.nano" ]
        AssertDescription: Dev environment must be t2.nano
    RuleCondition: !Equals [ !Ref Environment, dev ]
  ProdEnvironmentRule:
    Assertions:
      - Assert: !Equals [ !Ref InstanceType,  "t2.micro" ]
        AssertDescription: Prod environment must be t2.micro
    RuleCondition: !Equals [ !Ref Environment, prod ]
  TestEnvironmentRule:
    Assertions:
      - Assert: !Equals [ !Ref InstanceType,  "t2.small" ]
        AssertDescription: Test environment must be t2.small
    RuleCondition: !Equals [ !Ref Environment, test ]


Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: 'Name'
          Value: 'MyVPC'

  EC2Instance:
      Type: "AWS::EC2::Instance"
      Condition: "WithEC2"
      Properties:
        InstanceType: "t2.micro"
        KeyName: "vockey"
        ImageId: ami-04b4f1a9cf54c11d0
        SecurityGroupIds:
          - !Ref MySecurityGroup
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: "Name"
            Value: !Join ["-", [Manel, !GetAtt PublicSubnet1.AvailabilityZone]]
          - Key: "VPCID"
            Value: !Ref MyVPC

  InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: 'Name'
            Value: 'InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: true


  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 'AttachGateway'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  AssociateRouteTable1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Permitir acceso SSH"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
